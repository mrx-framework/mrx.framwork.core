const express = require("express")
const app = express()
const fs = require("fs")
const path = require("path")
const config = require("../config")
const compression = require("compression")
const LRU = require("lru-cache")
const cors = require("cors")
const createApolloServer = require("./apollo-server")
const configurePassport = require("./passport")
const configureMediaGateway = require("./media")


const createServer = () => {
  require("./database")

  const cache = new LRU({
    max: 1000,
    maxAge: 60 * 60 * 24 * 365.25
  })

  const isProduction = config.mode === "production"

  const resolve = (file) => path.resolve(__dirname, file)
  const template = fs.readFileSync("./index.html", "utf-8")

  const createRenderer = (bundle, options) => require("vue-server-renderer")
    .createBundleRenderer(bundle, Object.assign(options, {
      template,
      cache,
      basedir: resolve("../dist"),
      runInNewContext: true
    }))

  const serve = (path, cache) => express.static(resolve(path), {
    maxage: cache && isProduction ? 60 * 60 * 24 * 365 : 0
  })

  const render = (req, res, context) => {
    const s = Date.now()

    console.log(`Rendering: ${req.url}`)

    res.setHeader("Content-Type", "text/html")

    const errorHandler = (err) => {
      // TODO: Render Error Page
      console.error(`Fatal error when rendering : ${req.url}`)
      console.error(err)

      res.status(500)
      res.end(`500 | Fatal error: ${err}`)

      console.log(`Whole request: ${Date.now() - s}ms`)
    }

    renderer.renderToString(context, (err, html) => {
      if (err) return errorHandler(err)

      res.status(200)
      res.end(html)

      console.log(`Whole request: ${Date.now() - s}ms`)
    })
  }

  let renderer
  let readyPromise

  if (isProduction) {
    // In production: create server renderer using built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const bundle = require("../dist/vue-ssr-bundle.json")
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require("../dist/vue-ssr-client-manifest.json")
    renderer = createRenderer(bundle, {
      clientManifest
    })
    readyPromise = Promise.resolve()
  }
  else {
    readyPromise = require("../build/setup-dev-server")(app, (bundle, options) => {
      renderer = createRenderer(bundle, options)
    })
  }


  app.use(compression({ threshold: 0 }))
  app.use(express.json())
  app.use(express.urlencoded({ extended: false }))
  app.use(cors({
    origin: `${config.server.ssl ? "https" : "http"}://${config.server.host}:${config.server.port}`,
    credentials: true
  }))

  app.use("/dist", serve("../dist", true))
  //app.use("/media", express.static("media"))

  // Configure Media Gateway
  configureMediaGateway(app, express)

  // Configure Passport
  configurePassport(app)

  // Create the Apollo Server
  createApolloServer(app)


  app.get("*", (req, res) => {
    const context = { url: req.url }

    isProduction ?
      render(req, res, context) :
      readyPromise.then(() => render(req, res, context))
  })

  return { app, readyPromise }
}

module.exports = {
  createServer,
  close: () => {
    server.close()
  }
}
